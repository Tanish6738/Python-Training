Python Docs on Python.org documentations.

difference btw the 32 and 64 bits

why the python come ?

what is variable .

Why hertz not meter per second ? 

memory in 2d is like and excel sheet.
    
    Address ,value and variable

    like linkedList.

We Store the data in the Cell and the reference in the variable


PEP 8 is the Python guide for the Style  =  https://pep8.org/


NameSpace - is a dictionary where the All the Data types are mapped in the Python

Operators Arithmetic , Logical , Assignmenet , Bitwise = (PIPE, AMPERCENT, TILDE , CRAT)


DATA TYPE - list , tuple , string , (Range - generator and iterators of list) . 

colon significe the scope of if ,else, elif ,while for anything is started

By default the syntax and format of string is single quote.

WE cannot perform the concatination in the sets 

we have the continous memory allocation so we can use the loop on the sequential things which is either 

    we can read it using the index and elements directly 

    why we use the commas in range because range() is a function.

    """s_str = "Hello"

    ans = "r"
    var = ans + s_str[1:] Deep Copy
    print(ans + s_str[1:])""" Shallow Copy

    difference btw the Shallow Copy and deep copy like  in the shallow copy the variable is terminated after the complete execution of the program but the in the deep copy the new values will be stored in the program after the program ends


    Range used as generator and iterators.


JO bhi class ke ander honge wo methods

Types : built in , User Defined , anynomus / Lamda , Higer Order

    built in function are the functions which are defined inside the default module of the python itself and they are the native to the python and present inside in the 

    https://docs.python.org/3/library/functions.html

    import builtins

    print(dir(builtins))


    User Defined : Are the functions which are the defined by the users for their easy of work

        parameters : default def func(a = 10)

                    KeyWords func(a = 20 )
                    Multivalue : def func(*a):
                                    print(type(a)) # print : Tuple Because of reference passing
                                            
                                func(1,2,3,4)
                    KeyWords Multivalue : 
                                def func(**b):
                                    print(type(b)) # print : dictionary Because of reference passing
                                            
                                func(1,2,3,4)

        Lambda = var = Lambda <parameters> : Code Block

        

OOPS 
    - class
    - Object
    

    - Abstraction
    - Encapsulation
    - PolyMorphism
    - Inheritence
    
thier is not logic of Constructor
Magic and  Dunder Methods in the Python

here the in __init__(self) self reperesent the current instance of the Object

obj = class1() here the obj is referenced as self


Because of NameSpace We Cannot use the Method Overloading . Because the Same function is not assign in the same dictionary of NameSpace